}
# Extract all parts
clientName <- parts[1]
firstDay <- parts[2]
lastDay <- parts[3]
extension <- parts[4]
# Check if the date formats are valid (DDMMYY)
if (!grepl("^\\d{6}$", firstDay) || !grepl("^\\d{6}$", lastDay)) {
return(FALSE)
}
# Convert dates to Date objects for proper comparison
firstDayDate <- as.Date(firstDay, format = "%d%m%y")
lastDayDate <- as.Date(lastDay, format = "%d%m%y")
# Validate date order: LastDay is not earlier than FirstDay
if (lastDayDate < firstDayDate) {
return(FALSE) # Last day is before first day
}
# Check if the extension is valid
extensionValidation <- c("xml", "csv", "json")
if (!(extension %in% extensionValidation)) {
return(FALSE)
}
# If all checks pass, return TRUE
return(TRUE)
}
# Function to extract the customer name from the file name
getCustomerName <- function(fileName) {
# Split the file name by dots
parts <- unlist(strsplit(fileName, "\\."))
# Check if the file name has at least one dot
if (length(parts) < 2) {
return("Invalid")
}
# Return the first part (customer name)
return(parts[1])
}
# Function to extract the first day from the file name
getFirstDay <- function(fileName){
# Split the file name by dots
parts <- unlist(strsplit(fileName, "\\."))
# Check if the file name has a least three parts
if(length(parts) < 3){
return("Invalid")
}
# Return the second part as first day
return(parts[2])
}
# Function to get the Extension of the order file
getExtension <- function(fileName){
# Split the file name by dots
parts <- unlist(strsplit(fileName, "\\."))
# Check if the file name has a least four parts
if(length(parts) < 4){
return("Invalid")
}
# Return the extension (fourth part)
return(parts[4])
}
# Function to generate the document storage path
genDocPath <- function(root, firstday, ext){
# Construct the document path using file.path for compatibility
docPath <- file.path(root, firstday, ext)
# Return the generated path
return(docPath)
}
# Function to store a document in the correct folder
storeDoc <- function(intakeFolder, file, docFolder = "docDB") {
# Validate the file name before processing
if (!checkFile(file)) {
return(FALSE)  # Exit if the file name is invalid
}
# Construct the source file path
srcFile <- file.path(intakeFolder, file)
# Ensure the source file exists before proceeding
if (!file.exists(srcFile)) {
return(FALSE)
}
# Extract parts of the filename
clientName <- getCustomerName(file)
firstDay <- getFirstDay(file)
extension <- getExtension(file)
# Generate the destination path
destPath <- genDocPath(docFolder, firstDay, extension)
destFile <- file.path(destPath, clientName)
# Ensure the destination folder exists
if (!dir.exists(destPath)) {
dir.create(destPath, recursive = TRUE)
}
# Copy the file to the destination
if (file.copy(srcFile, destFile, overwrite = TRUE)) {
# Validate the copy by checking the file size
if (file.info(srcFile)$size == file.info(destFile)$size) {
file.remove(srcFile)
return(TRUE)
} else {
return(FALSE)
}
} else {
return(FALSE)
}
}
# Function to process all files in the intake folder & copies them to the correct folder in the root folder.
storeAllDocs <- function(intakeFolder, rootFolder) {
# Get all files in the intake folder (excluding directories)
files <- list.files(intakeFolder, full.names = FALSE, pattern = "\\.")
# Check if there are no files in the intake folder
if (length(files) == 0) {
return()
}
processedCount <- 0
unprocessedFiles <- c()
for (file in files) {
cat("Processing file:", file, "\n")
# Check if the file is valid before processing
if (checkFile(file)) {
if (storeDoc(intakeFolder, file, rootFolder)) {
processedCount <- processedCount + 1  # Increment counter for successful processing
} else {
unprocessedFiles <- c(unprocessedFiles, file)
}
} else {
cat("Skipping invalid file:", file, "\n")
unprocessedFiles <- c(unprocessedFiles, file)
}
}
# Print the summary of processed files
cat("Successfully processed", processedCount, "files.\n")
if (length(unprocessedFiles) > 0) {
cat("These files were not processed:\n")
cat(unprocessedFiles, sep = "\n")
}
}
# Function to reset the document database by deleting contents
resetDB <- function(root) {
# List all files and subfolders under the root
files <- list.files(root, recursive = TRUE, full.names = TRUE)
subfolders <- list.dirs(root, recursive = TRUE, full.names = TRUE)[-1]
# Remove all files
for (file in files) {
if (file.remove(file)) {
print(paste("Deleted file:", file))
} else {
print(paste("Error deleting file:", file))
}
}
# Remove all subfolders
for (folder in subfolders) {
if (unlink(folder, recursive = TRUE) == 0) {
print(paste("Deleted folder:", folder))
} else {
print(paste("Error deleting folder:", folder))
}
}
print(paste("Reset complete. All contents under", root, "have been removed."))
}
# Main Function of the program act as the entry point of the script.
# All Functions execution starts here.
main <- function(){
cat("Program execution starts here.\n\n")
# Setting up required directories
cat("Setting up folders....\n")
setupDB()
cat("\n")
# Test cases for different functions
cat("---***Testing checkFile Function***---\n\n")
# Test valid cases
cat("Test Case: KlainerIndustries.261124.011224.xml\n")
cat(checkFile("KlainerIndustries.261124.011224.xml"), "\n\n")
cat("Test Case: SKADigitalLLC.111225.181225.json\n")
cat(checkFile("SKADigitalLLC.111225.181225.json"), "\n\n")
# Test invalid cases
cat("Test Case: Incorrect.File.Name.xml\n")
cat(checkFile("Incorrect.File.Name.xml"), "\n\n")
cat("Test Case: KlainerIndustries.261124.011224.txt\n")
cat(checkFile("KlainerIndustries.261124.011224.txt"), "\n\n")
cat("Test Case: KlainerIndustries.021225.011225.txt\n")
cat(checkFile("KlainerIndustries.021225.011225.txt"), "\n\n")
cat("Test Case: KlainerIndustries.224.txt\n")
cat(checkFile("KlainerIndustries.224.txt"), "\n\n")
# getCustomerName Function
cat("---***Testing getCustomerName Function***---\n\n")
cat("Result for 'KlainerIndustries.261124.011224.xml':", getCustomerName("KlainerIndustries.261124.011224.xml"), "\n\n")
cat("Result for 'SKADigitalLLC.011125.011325.csv':", getCustomerName("SKADigitalLLC.011125.011325.csv"), "\n\n")
cat("Result for 'InvalidFileName':", getCustomerName("InvalidFileName"), "\n\n")
# getFirstDay Function
cat("---***Testing getFirstDay Function***---\n\n")
cat("First day for 'KlainerIndustries.261124.011224.xml':", getFirstDay("KlainerIndustries.261124.011224.xml"), "\n\n")
cat("First day for 'SKADigitalLLC.011225.011325.csv':", getFirstDay("SKADigitalLLC.011225.011325.csv"), "\n\n")
cat("First day for 'InvalidFileName':", getFirstDay("InvalidFileName"), "\n\n")
# getExtension Function
cat("---***Testing getExtension Function***---\n\n")
cat("Extension for 'KlainerIndustries.261124.011224.xml':", getExtension("KlainerIndustries.261124.011224.xml"), "\n\n")
cat("Extension for 'SKADigitalLLC.011225.011325.csv':", getExtension("SKADigitalLLC.011225.011325.csv"), "\n\n")
cat("Extension for 'InvalidFileName':", getExtension("InvalidFileName"), "\n\n")
# genDocPath Function
cat("---***Testing genDocPath Function***---\n\n")
cat("Path for root='docDB', firstDay='261124', ext='xml':", genDocPath("docDB", "261124", "xml"), "\n\n")
cat("Path for root='docDB', firstDay='010124', ext='csv':", genDocPath("docDB", "010124", "csv"), "\n\n")
cat("Path for root='rootFolder', firstDay='150324', ext='json':", genDocPath("rootFolder", "150324", "json"), "\n\n")
# storeDoc Function
cat("---***Testing storeDoc Function***---\n\n")
cat("Store doc result for 'KlainerIndustries.261124.011224.xml':", storeDoc("docTemp", "KlainerIndustries.261124.011224.xml"), "\n\n")
cat("Store doc result for 'Invalid.File.Name.xml':", storeDoc("docTemp", "Invalid.File.Name.xml"), "\n\n")
cat("Store doc result for 'SKADigital.010124.010124.csv':", storeDoc("docTemp", "SKADigital.010124.010124.csv"), "\n\n")
# Test storeAllDocs function
cat("---***Testing storeAllDocs Function***---\n\n")
storeAllDocs("docTemp", "docDB")
cat("\n")
# Test resetDB function
cat("---***Testing resetDB Function***---\n\n")
resetDB("docDB")
cat("\n")
}
# Call the main() function to run the program.
main()
### CS5600 / Spring 2025
### Shorena K. Anzhilov
# Global Variable for Root Document Store
# Directory for the document store
rootDir <- "docDB"
# Global Variable for Intake Folder
# Directory for unprocessed files
intakeDir <- "docTemp"
# Function to set up the intake and document store folders
setupDB <- function() {
# Check if the document store folder exists
if (!dir.exists(rootDir)) {
dir.create(rootDir)  # Create the root document store folder
print(paste("Created document store folder:", rootDir))
} else {
print(paste("Document store folder already exists:", rootDir))
}
# Check if the intake folder exists
if (!dir.exists(intakeDir)) {
dir.create(intakeDir)  # Create the intake folder
print(paste("Created intake folder:", intakeDir))
} else {
print(paste("Intake folder already exists:", intakeDir))
}
}
# Function to validate file name format and date order
checkFile <- function(fileName) {
# Split the file name by dots
parts <- unlist(strsplit(fileName, "\\."))
# Check if the file name has exactly 4 parts: client, firstDay, lastDay, and extension
if (length(parts) != 4) {
return(FALSE)
}
# Extract all parts
clientName <- parts[1]
firstDay <- parts[2]
lastDay <- parts[3]
extension <- parts[4]
# Check if the date formats are valid (DDMMYY)
if (!grepl("^\\d{6}$", firstDay) || !grepl("^\\d{6}$", lastDay)) {
return(FALSE)
}
# Convert dates to Date objects for proper comparison
firstDayDate <- as.Date(firstDay, format = "%d%m%y")
lastDayDate <- as.Date(lastDay, format = "%d%m%y")
# Validate date order: LastDay is not earlier than FirstDay
if (lastDayDate < firstDayDate) {
return(FALSE) # Last day is before first day
}
# Check if the extension is valid
extensionValidation <- c("xml", "csv", "json")
if (!(extension %in% extensionValidation)) {
return(FALSE)
}
# If all checks pass, return TRUE
return(TRUE)
}
# Function to extract the customer name from the file name
getCustomerName <- function(fileName) {
# Split the file name by dots
parts <- unlist(strsplit(fileName, "\\."))
# Check if the file name has at least one dot
if (length(parts) < 2) {
return("Invalid")
}
# Return the first part (customer name)
return(parts[1])
}
# Function to extract the first day from the file name
getFirstDay <- function(fileName){
# Split the file name by dots
parts <- unlist(strsplit(fileName, "\\."))
# Check if the file name has a least three parts
if(length(parts) < 3){
return("Invalid")
}
# Return the second part as first day
return(parts[2])
}
# Function to get the Extension of the order file
getExtension <- function(fileName){
# Split the file name by dots
parts <- unlist(strsplit(fileName, "\\."))
# Check if the file name has a least four parts
if(length(parts) < 4){
return("Invalid")
}
# Return the extension (fourth part)
return(parts[4])
}
# Function to generate the document storage path
genDocPath <- function(root, firstday, ext){
# Construct the document path using file.path for compatibility
docPath <- file.path(root, firstday, ext)
# Return the generated path
return(docPath)
}
# Function to store a document in the correct folder
storeDoc <- function(intakeFolder, file, docFolder = "docDB") {
# Validate the file name before processing
if (!checkFile(file)) {
return(FALSE)  # Exit if the file name is invalid
}
# Construct the source file path
srcFile <- file.path(intakeFolder, file)
# Ensure the source file exists before proceeding
if (!file.exists(srcFile)) {
return(FALSE)
}
# Extract parts of the filename
clientName <- getCustomerName(file)
firstDay <- getFirstDay(file)
extension <- getExtension(file)
# Generate the destination path
destPath <- genDocPath(docFolder, firstDay, extension)
destFile <- file.path(destPath, clientName)
# Ensure the destination folder exists
if (!dir.exists(destPath)) {
dir.create(destPath, recursive = TRUE)
}
# Copy the file to the destination
if (file.copy(srcFile, destFile, overwrite = TRUE)) {
# Validate the copy by checking the file size
if (file.info(srcFile)$size == file.info(destFile)$size) {
file.remove(srcFile)
return(TRUE)
} else {
return(FALSE)
}
} else {
return(FALSE)
}
}
# Function to process all files in the intake folder & copies them to the correct folder in the root folder.
storeAllDocs <- function(intakeFolder, rootFolder) {
# Get all files in the intake folder (excluding directories)
files <- list.files(intakeFolder, full.names = FALSE, pattern = "\\.")
# Check if there are no files in the intake folder
if (length(files) == 0) {
return()
}
processedCount <- 0
unprocessedFiles <- c()
for (file in files) {
cat("Processing file:", file, "\n")
# Check if the file is valid before processing
if (checkFile(file)) {
if (storeDoc(intakeFolder, file, rootFolder)) {
processedCount <- processedCount + 1  # Increment counter for successful processing
} else {
unprocessedFiles <- c(unprocessedFiles, file)
}
} else {
cat("Skipping invalid file:", file, "\n")
unprocessedFiles <- c(unprocessedFiles, file)
}
}
# Print the summary of processed files
cat("Successfully processed", processedCount, "files.\n")
if (length(unprocessedFiles) > 0) {
cat("These files were not processed:\n")
cat(unprocessedFiles, sep = "\n")
}
}
# Function to reset the document database by deleting contents
resetDB <- function(root) {
# List all files and subfolders under the root
files <- list.files(root, recursive = TRUE, full.names = TRUE)
subfolders <- list.dirs(root, recursive = TRUE, full.names = TRUE)[-1]
# Remove all files
for (file in files) {
if (file.remove(file)) {
print(paste("Deleted file:", file))
} else {
print(paste("Error deleting file:", file))
}
}
# Remove all subfolders
for (folder in subfolders) {
if (unlink(folder, recursive = TRUE) == 0) {
print(paste("Deleted folder:", folder))
} else {
print(paste("Error deleting folder:", folder))
}
}
print(paste("Reset complete. All contents under", root, "have been removed."))
}
# Main Function of the program act as the entry point of the script.
# All Functions execution starts here.
main <- function(){
cat("Program execution starts here.\n\n")
# Setting up required directories
cat("Setting up folders....\n")
setupDB()
cat("\n")
# Test cases for different functions
cat("---***Testing checkFile Function***---\n\n")
# Test valid cases
cat("Test Case: KlainerIndustries.261124.011224.xml\n")
cat(checkFile("KlainerIndustries.261124.011224.xml"), "\n\n")
cat("Test Case: SKADigitalLLC.111225.181225.json\n")
cat(checkFile("SKADigitalLLC.111225.181225.json"), "\n\n")
# Test invalid cases
cat("Test Case: Incorrect.File.Name.xml\n")
cat(checkFile("Incorrect.File.Name.xml"), "\n\n")
cat("Test Case: KlainerIndustries.261124.011224.txt\n")
cat(checkFile("KlainerIndustries.261124.011224.txt"), "\n\n")
cat("Test Case: KlainerIndustries.021225.011225.txt\n")
cat(checkFile("KlainerIndustries.021225.011225.txt"), "\n\n")
cat("Test Case: KlainerIndustries.224.txt\n")
cat(checkFile("KlainerIndustries.224.txt"), "\n\n")
# getCustomerName Function
cat("---***Testing getCustomerName Function***---\n\n")
cat("Result for 'KlainerIndustries.261124.011224.xml':", getCustomerName("KlainerIndustries.261124.011224.xml"), "\n\n")
cat("Result for 'SKADigitalLLC.011125.011325.csv':", getCustomerName("SKADigitalLLC.011125.011325.csv"), "\n\n")
cat("Result for 'InvalidFileName':", getCustomerName("InvalidFileName"), "\n\n")
# getFirstDay Function
cat("---***Testing getFirstDay Function***---\n\n")
cat("First day for 'KlainerIndustries.261124.011224.xml':", getFirstDay("KlainerIndustries.261124.011224.xml"), "\n\n")
cat("First day for 'SKADigitalLLC.011225.011325.csv':", getFirstDay("SKADigitalLLC.011225.011325.csv"), "\n\n")
cat("First day for 'InvalidFileName':", getFirstDay("InvalidFileName"), "\n\n")
# getExtension Function
cat("---***Testing getExtension Function***---\n\n")
cat("Extension for 'KlainerIndustries.261124.011224.xml':", getExtension("KlainerIndustries.261124.011224.xml"), "\n\n")
cat("Extension for 'SKADigitalLLC.011225.011325.csv':", getExtension("SKADigitalLLC.011225.011325.csv"), "\n\n")
cat("Extension for 'InvalidFileName':", getExtension("InvalidFileName"), "\n\n")
# genDocPath Function
cat("---***Testing genDocPath Function***---\n\n")
cat("Path for root='docDB', firstDay='261124', ext='xml':", genDocPath("docDB", "261124", "xml"), "\n\n")
cat("Path for root='docDB', firstDay='010124', ext='csv':", genDocPath("docDB", "010124", "csv"), "\n\n")
cat("Path for root='rootFolder', firstDay='150324', ext='json':", genDocPath("rootFolder", "150324", "json"), "\n\n")
# storeDoc Function
cat("---***Testing storeDoc Function***---\n\n")
cat("Store doc result for 'KlainerIndustries.261124.011224.xml':", storeDoc("docTemp", "KlainerIndustries.261124.011224.xml"), "\n\n")
cat("Store doc result for 'Invalid.File.Name.xml':", storeDoc("docTemp", "Invalid.File.Name.xml"), "\n\n")
cat("Store doc result for 'SKADigital.010124.010124.csv':", storeDoc("docTemp", "SKADigital.010124.010124.csv"), "\n\n")
# Test storeAllDocs function
cat("---***Testing storeAllDocs Function***---\n\n")
storeAllDocs("docTemp", "docDB")
cat("\n")
# Test resetDB function
cat("---***Testing resetDB Function***---\n\n")
resetDB("docDB")
cat("\n")
}
# Call the main() function to run the program.
main()
View(checkFile)
source("~/Desktop/CS5200/CS5200.DocDB.Anzhilov/DocDB-Anzhilov.R", echo=TRUE)
main()
main()
source("DocDB-Anzhilov.R")
checkFile("KlainerIndustries.26-11-24.xml")
checkFile("Bad.Name.Format.txt")
checkFile("ClientX.261124.csv")
checkFile("ClientX.26-11-24.exe")
getCustomerName("KlainerIndustries.26-11-24.xml")
getCustomerName("Bad.Name.Format.txt")
getExtension("KlainerIndustries.26-11-24.xml")
genOrderPath("orderDB", "KlainerIndustries.26-11-24.xml")
storeOrderFile("docTemp", "KlainerIndustries.26-11-24.xml")
storeOrderFile("docTemp", "KlainerIndustries.26-11-24.xml")
storeAllOrders("docTemp", "orderDB")
resetDB("orderDB")
source("~/Desktop/CS5200/CS5200.DocDB.Anzhilov/DocDB-Anzhilov.R", echo=TRUE)
View(setupDB)
source("DocDB-Anzhilov.R")
main()
source("DocDB-Anzhilov.R")
main()
main()
main()
main()
main()
main()
main()
source("DocDB-Anzhilov.R")
main()
main()
main()
main()
cat("\014")
source("DocDB-Anzhilov.R")
main()
source("DocDB-Anzhilov.R")
source("DocDB-Anzhilov.R")
source("DocDB-Anzhilov.R")
main()
source("DocDB-Anzhilov.R")
cat("\014")
source("DocDB-Anzhilov.R")
View(setupDB)
source("DocDB-Anzhilov.R")
source("DocDB-Anzhilov.R")
main()
View(resetDB)
View(genOrderPath)
